#!/bin/bash

# Function to display ASCII art of a computer screen with SYSI
display_logo() {
    echo -e "\e[31m      _________\e[0m"
    echo -e "\e[32m     /         \\ \e[0m"
    echo -e "\e[33m    / _______   \\ \e[0m"
    echo -e "\e[34m   | |       |  |\e[0m"
    echo -e "\e[35m   | |  SYSI |  |\e[0m"
    echo -e "\e[36m   | |_______|  |\e[0m"
    echo -e "\e[37m   |           |\e[0m"
    echo -e "\e[90m   |  _______  |\e[0m"
    echo -e "\e[91m   | /       \\ |\e[0m"
    echo -e "\e[92m   |/         \\|\e[0m"
    echo -e "\e[93m    \\_________/\e[0m"
    echo -e "\e[93m \e[0m"
    echo -e "\e[93m \e[0m"

}

# Function to display system information including GPU temperatures
display_info() {
    os=$(awk -F= '/^PRETTY_NAME=/{print $2}' /etc/os-release | tr -d '"')
    echo -e "\e[33m Operating System:\e[0m $os"
    echo -e "\e[33m Host:\e[0m $(cat /proc/sys/kernel/hostname)"
    echo -e "\e[33m Logged-in Users:\e[0m"
w
    echo -e "\e[33m Kernel Name:\e[0m $(uname -s)"
    echo -e "\e[33m Kernel Version:\e[0m $(uname -r)"
    echo -e "\e[33m Kernel Release:\e[0m $(uname -v)"
    echo -e "\e[33m Kernel Architecture:\e[0m $(uname -m)"
    echo -e "\e[33m Uptime:\e[0m $(uptime -p)"
    echo -e "\e[33m Packages:\e[0m $(get_package_count)"
    echo -e "\e[33m Shell:\e[0m $SHELL"
    echo -e "\e[33m Resolution:\e[0m $(xrandr | grep '*' | awk '{print $1}')"
    echo -e "\e[33m Machine Hardware Platform:\e[0m $(uname -i)"
    echo -e "\e[33m Processor Type:\e[0m $(uname -p)"
    echo -e "\e[33m CPU:\e[0m $(grep "model name" /proc/cpuinfo | cut -d ' ' -f 3- | uniq)"
    echo -e "\e[33m CPU Cores:\e[0m $(awk '/^cpu cores/ {print $4; exit}' /proc/cpuinfo)"
    echo -e "\e[33m CPU Threads:\e[0m $(awk '/^processor/ {count++} END {print count}' /proc/cpuinfo)"

    # Get CPU temperature using lm_sensors (assuming it's installed)
    if command -v sensors &> /dev/null; then
        echo -e "\e[33m CPU Temperature:\e[0m"
        sensors | grep "Core"
    else
        echo -e "\e[33m CPU Temperature:\e[0m Not available (lm_sensors not installed)"
    fi

    # Display GPU temperatures for Nvidia, AMD, and Intel GPUs if available
    echo -e "\e[33m GPU Temperatures:\e[0m"
    
    # Check and display Nvidia GPU temperature
    if command -v nvidia-smi &> /dev/null; then
        echo -e "\e[33m   Nvidia:\e[0m"
        nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader | awk '{print "      ", $1, "°C"}'
    fi

    # Check and display AMD GPU temperature
    if command -v radeontop &> /dev/null; then
        echo -e "\e[33m   AMD:\e[0m"
        radeontop -l1 | grep "Temperature"
    fi

    # Check and display Intel GPU temperature
    if command -v intel_gpu_top &> /dev/null; then
        echo -e "\e[33m   Intel:\e[0m"
        intel_gpu_top -s 1 | awk '/Rendering/ {print "      ", $7, "°C"}'
    fi
    echo -e "\e[33m GPU:\e[0m $(lspci | grep VGA | cut -d ':' -f 3 | cut -d '[' -f 1 | sed 's/^ *//')"
    echo -e "\e[33m Memory:\e[0m $(free -h --si | awk '/^Mem/ {print $3 " / " $2}')"
    echo -e "\e[33m Swap:\e[0m $(free -h --si | awk '/^Swap/ {print $3 " / " $2}')"
    echo -e "\e[33m Disk Usage:\e[0m $(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 " used)"}')"
    echo -e "\e[33m Clock/Time:\e[0m $(date '+%Y-%m-%d %H:%M:%S')"
    echo -e "\e[33m Battery:\e[0m $(upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to full|percentage")"
    echo -e "\e[33m Mounted Drives:\e[0m"
    printf "      %-30s %-10s %-10s %-10s\n" "Filesystem" "Size" "Used" "Use%"
    df -h | awk 'NR>1 {printf "      %-30s %-10s %-10s %-10s\n", $1, $2, $3, $5}'
echo -e ""
    # [Additional functionalities endable manualy]
    #echo -e "\e[33m Network Interfaces:\e[0m"
    #ip addr show

    #echo -e "\e[33m Top Processes by CPU Usage:\e[0m"
    #ps -eo pid,ppid,%cpu,%mem,cmd --sort=-%cpu | head -n 10

    #echo -e "\e[33m Top Processes by Memory Usage:\e[0m"
    #ps -eo pid,ppid,%cpu,%mem,cmd --sort=-%mem | head -n 10



    #echo -e "\e[33m System Logs (last 20 lines of syslog):\e[0m"
    #tail -n 20 /var/log/syslog

    #echo -e "\e[33m Disk I/O Statistics:\e[0m"
    #iostat

    #echo -e "\e[33m System Load:\e[0m"
    #uptime
}


# Function to get the package count based on package manager
get_package_count() {
    if command -v dpkg-query &> /dev/null; then
        echo $(dpkg-query -f '${binary:Package}\n' -W | wc -l)
    elif command -v rpm &> /dev/null; then
        echo $(rpm -qa | wc -l)
    elif command -v pacman &> /dev/null; then
        echo $(pacman -Q | wc -l)
    else
        echo "N/A"
    fi
}

# Function to get information about various themes
get_theme_info() {
    gtk_theme=$(gsettings get org.gnome.desktop.interface gtk-theme)
    icon_theme=$(gsettings get org.gnome.desktop.interface icon-theme)
    cursor_theme=$(gsettings get org.gnome.desktop.interface cursor-theme)

    echo -e "\e[33mGTK Theme:\e[0m $gtk_theme"
    echo -e "\e[33mIcon Theme:\e[0m $icon_theme"
    echo -e "\e[33mCursor Theme:\e[0m $cursor_theme"
}

# Function to check if Nerdfonts are installed
check_nerdfonts() {
    if fc-list : file family | grep -q "Nerd Font"; then
        return 0
    else
        return 1
    fi
}

# Main function to display output
main() {
    clear
    display_logo
    display_info
    get_theme_info

 # Check if Nerdfonts are installed
    if check_nerdfonts; then
        echo -e "\e[32mNerdfonts are installed.\e[0m"
    else
        echo -e "\e[31mNerdfonts are not installed. Displaying alternative output.\e[0m"
        # Display alternative output here
    fi
}

# Execute main function
main
