#!/bin/bash
set -u
#set -e
#set -o pipefail



# Get memory and swap usage details
memory_usage=$(free -h --si | awk '/^Mem/ {print $3 " / " $2}')
swap_usage=$(free -h --si | awk '/^Swap/ {print $3 " / " $2}')

# Calculate percentage for memory
memory_used=$(free --si | awk '/^Mem/ {print $3}')
memory_total=$(free --si | awk '/^Mem/ {print $2}')
memory_percentage=$(awk -v used="$memory_used" -v total="$memory_total" 'BEGIN { printf("%.2f%%", (used / total) * 100) }')

# Calculate percentage for swap
swap_used=$(free --si | awk '/^Swap/ {print $3}')
swap_total=$(free --si | awk '/^Swap/ {print $2}')
swap_percentage=$(awk -v used="$swap_used" -v total="$swap_total" 'BEGIN { printf("%.2f%%", (used / total) * 100) }')

# Function to display ASCII art of a computer screen with SYSI
display_logo() {
    echo -e "\e[41m      _________\e[0m"
    echo -e "\e[42m     /         \\ \e[0m"
    echo -e "\e[43m    / _______   \\ \e[0m"
    echo -e "\e[44m   | |       |  |\e[0m"
    echo -e "\e[45m   | |  SYSI |  |\e[0m"
    echo -e "\e[46m   | |_______|  |\e[0m"
    echo -e "\e[47m   |           |\e[0m"
    echo -e "\e[100m   |  _______  |\e[0m"
    echo -e "\e[101m   | /       \\ |\e[0m"
    echo -e "\e[102m   |/         \\|\e[0m"
    echo -e "\e[43m    \\_________/\e[0m"
    echo -e "\e[93m \e[0m"
    echo -e "\e[93m \e[0m"

}



# Function to display system information including GPU temperatures
display_info() {
    os=$(awk -F= '/^PRETTY_NAME=/{print $2}' /etc/os-release | tr -d '"')
    echo -e "\e[33m  Operating System:\e[0m $os"
    echo -e "\e[33m  Host:\e[0m $(cat /proc/sys/kernel/hostname)"
       echo -e "\e[33m  model:\e[0m $(cat /sys/devices/virtual/dmi/id/board_{name,vendor} | awk '!(NR%2){print$1,p}{p=$0}')"
    echo -e "\e[33m Logged-in Users:\e[0m"
w
    echo -e "\e[33m Kernel Name:\e[0m $(uname -s)"
    echo -e "\e[33m Kernel Version:\e[0m $(uname -r)"
    echo -e "\e[33m Kernel Release:\e[0m $(uname -v)"
    echo -e "\e[33m Kernel Architecture:\e[0m $(uname -m)"
    echo -e "\e[33m  Uptime:\e[0m $(uptime -p)"
    echo -e "\e[33m  Clock/Time:\e[0m $(date '+%Y-%m-%d %H:%M:%S')"
    echo -e "\e[33m  Packages:\e[0m $(get_package_count)"
    echo -e "\e[33m  Resolution:\e[0m $(xrandr | grep -i  "*" )"
    echo -e "\e[33m  Machine Hardware Platform:\e[0m $(uname -i)"
    echo -e "\e[33m  Processor Type:\e[0m $(uname -p)"
    echo -e "\e[33m  CPU:\e[0m $(grep "model name" /proc/cpuinfo | cut -d ' ' -f 3- | uniq)"
    echo -e "\e[33m  CPU Cores:\e[0m $(awk '/^cpu cores/ {print $4; exit}' /proc/cpuinfo)"
    echo -e "\e[33m  CPU Threads:\e[0m $(awk '/^processor/ {count++} END {print count}' /proc/cpuinfo)"        
   # Display fan speeds using sensors
    echo -e "\e[33m  Fan Speeds:\e[0m"
    if command -v sensors &> /dev/null; then
        fan_speeds=$(sensors | grep -i 'fan' | awk '{print "      ", $1, $2, $3, $4}')
        if [ -n "$fan_speeds" ]; then
            echo "$fan_speeds"
        else
            echo -e "\e[33m   No fan speed information available\e[0m"
        fi
    else
        echo -e "\e[33m   Not available (sensors not installed)\e[0m"
    fi


    if command -v sensors &> /dev/null; then
        echo -e "\e[33m  CPU Temperature:\e[0m"
        sensors | grep "Core"
    else
        echo -e "\e[33m  CPU Temperature:\e[0m Not available (lm_sensors not installed)"
    fi

    # Display GPU temperatures using sensors
    echo -e "\e[33m  GPU Temperatures:\e[0m $(sensors | grep -i 'gpu')"
    if command -v sensors &> /dev/null; then
        sensors | grep -i 'gpu'
    else
        echo -e "\e[33m   Not available (sensors not installed)\e[0m"
    fi
    echo -e "\e[33m  GPU:\e[0m $(lspci | grep VGA | cut -d ':' -f 3 | cut -d '[' -f 1,2 | sed 's/^ *//')"
    echo -e "\e[33m  Memory:\e[0m ($memory_percentage) ($memory_usage) "
    echo -e "\e[33m  Swap:\e[0m ($swap_percentage) ($swap_usage) "
    echo -e "\e[33m  Disk Usage:\e[0m $(df -h / | awk 'NR==2 {print "(" $5 " used) " $3 "/" $2  }')"
    echo -e "\e[33m  Battery:\e[0m $(upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to full|percentage")"
    echo -e "\e[33m  Mounted Drives:\e[0m"
    printf "      %-30s %-10s %-10s %-10s\n" "Filesystem" "Size" "Used" "Use%"
    df -h | awk 'NR>1 {printf "      %-30s %-10s %-10s %-10s\n", $1, $2, $3, $5}'
        echo -e "\e[33m Disk I/O Statistics:\e[0m$(iostat)"
    
echo -e ""

     # [Additional functionalities enable manually]
    
#[network]
    #echo -e "\e[33m Network Interfaces:\e[0m"
    #ip addr show
#[cpu/process]
    #echo -e "\e[33m Top Processes by CPU Usage:\e[0m"
    #ps -eo pid,ppid,%cpu,%mem,cmd --sort=-%cpu | head -n 10

    #echo -e "\e[33m Top Processes by Memory Usage:\e[0m"
    #ps -eo pid,ppid,%cpupre-built PC’s that are considered gaming systems the norm is 32G.,%mem,cmd --sort=-%mem | head -n 10

#[gpu]
    # Display GPU temperatures for Nvidia, AMD, and Intel GPUs if available
    #echo -e "\e[33m  GPU Temperatures:\e[0m"
    
    # Check and display Nvidia GPU temperature
    #if command -v nvidia-smi &> /dev/null; then
        #echo -e "\e[33m   Nvidia:\e[0m"
        #nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader | awk '{print "      ", $1, "°C"}'
    #fi

    # Check and display AMD GPU temperature
    #if command -v radeontop &> /dev/null; then
        #echo -e "\e[33m   AMD:\e[0m"
        #radeontop -l1 | grep "Temperature"
    #fi

    # Check and display Intel GPU temperature
    #if command -v intel_gpu_top &> /dev/null; then
        #echo -e "\e[33m   Intel:\e[0m"
        #intel_gpu_top -s 1 | awk '/Rendering/ {print "      ", $7, "°C"}'
    #fi

#[logs]
    #echo -e "\e[33m System Logs (last 20 lines of syslog):\e[0m"
    #tail -n 20 /var/log/syslog


 #[Uptime can be replaced with more detailed one]
    #echo -e "\e[33m  :Uptime:\e[0m$(uptime)" 

#[endable shell]
    #echo -e "\e[32m Shell:\e[0m $SHELL"

    # [user need to endable security isshues]
    
    # Display Firewall Information [user need to endable]
    # echo -e "\e[33m  Firewall Information:\e[0m"
    #echo -e "\e[33m   UFW Status:\e[0m"
    #ufw status verbose | sed 's/^/      /'  # Adjust format as needed for your system's output
    #echo -e "\e[33m   IPTables Rules:\e[0m"
    #iptables -L -v -n | sed 's/^/      /'  # Adjust format as needed for your system's output
    #echo -e "\e[33m   Firewalld Zones and Services:\e[0m"
    #firewall-cmd --list-all-zones | sed 's/^/      /'  # Adjust format as needed for your system's output
    #echo -e "\e[33m   Nftables Rules:\e[0m"
    #nft list ruleset | sed 's/^/      /'  # Adjust format as needed for your system's output

   #[ Resolution can be repleced with more detailed one ]
    #echo -e "\e[33m Resolution:\e[0m $(hwinfo --monitor)"
}


# Function to get the package count based on package manager
get_package_count() {
    if command -v dpkg-query &> /dev/null; then
        echo $(dpkg-query -f '${binary:Package}\n' -W | wc -l)
    elif command -v rpm &> /dev/null; then
        echo $(rpm -qa | wc -l)
    elif command -v pacman &> /dev/null; then
        echo $(pacman -Q | wc -l)
    else
        echo "N/A"
    fi
}

# Function to get information about various themes
get_theme_info() {
    gtk_theme=$(gsettings get org.gnome.desktop.interface gtk-theme)
    icon_theme=$(gsettings get org.gnome.desktop.interface icon-theme)
    cursor_theme=$(gsettings get org.gnome.desktop.interface cursor-theme)

    echo -e "\e[33mGTK Theme:\e[0m $gtk_theme"
    echo -e "\e[33mIcon Theme:\e[0m $icon_theme"
    echo -e "\e[33mCursor Theme:\e[0m $cursor_theme"
}

# Main function to display output
main() {
    clear
    display_logo
    display_info
    get_theme_info
}

# Execute main function
main
